# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

variables:
  # The $(FlutterToolPath) variable is generated by the FlutterInstall task 
  # See code in the Flutter Build task https://github.com/aloisdeniel/vsts-flutter-tasks/blob/master/tasks/build/index.ts
  flutterExecPath: $(FlutterToolPath)/flutter.bat

trigger:
  batch: 'true'
  branches:
    include:
      - develop
      - release
      - master
  paths:
    include:
      - device_calendar/*

stages:
  # ----------- CI -----------
  - stage: Build
    condition: eq(1,2)
    jobs: 
     - job: BuildAndroidAndIos
       pool:
        vmImage: 'macOS-latest'
       steps:
        - task: FlutterInstall@0
          displayName: 'Flutter install'
          inputs:
            channel: 'stable'
            version: 'latest'

        - task: FlutterBuild@0
          displayName: 'Flutter build - Android'
          inputs:
            target: 'apk'
            projectDirectory: 'device_calendar/example'

        - task: FlutterBuild@0
          displayName: 'Flutter build - iOS'
          inputs:
            target: 'ios'
            projectDirectory: 'device_calendar/example'
            iosCodesign: false
            
  # -----------CD Pre-release -----------
  - stage: ReleaseBeta
    condition: eq(1,1)
    # dependsOn: Build
    # condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/release'))
    jobs:
     - job: Release
       pool:
        vmImage: 'windows-latest'
       steps:
        # - task: FlutterInstall@0
        #   displayName: 'Flutter install'
        #   inputs:
        #     channel: 'stable'
        #     version: 'latest'

        - task: PowerShell@2
          displayName: 'Pre-release versioning - pubspec.yaml'
          inputs:
            targetType: 'inline'
            script: |
              [string] $version = select-string -path "$(Build.SourcesDirectory)/device_calendar/pubspec.yaml" -pattern "(?<=version: ).*" | %{ $_.Matches[0].Value }
              [string] $versionRegex = '(?<=version: ).*'
              [string] $pubspecContent = Get-Content -Path "$(Build.SourcesDirectory)/device_calendar/pubspec.yaml" -Raw

              Write-Host " (i) Current version: $version"
              Write-Host " (i) Original pubspec.yaml content: $pubspecContent"

              [bool] $hasMatches = $pubspecContent -match $versionRegex

              Write-Host " (i) Found matches to replace version? $hasMatches"
              
              [string] $newPubspecContent = $pubspecContent -replace $versionRegex, "$version-dev.$(Build.BuildID)"

              Write-Host " (i) Updated pubspec.yaml content: $newPubspecContent"

              $newPubspecContent | Set-Content -Path "$(Build.SourcesDirectory)/device_calendar/pubspec.yaml"

        - task: PowerShell@2
          displayName: 'Pre-release versioning - changelog.md'
          inputs:
            targetType: 'inline'
            script: |
              [string] $version = select-string -path "$(Build.SourcesDirectory)/device_calendar/pubspec.yaml" -pattern "(?<=version: ).*" | %{ $_.Matches[0].Value }
              [string] $changelogContent = Get-Content -Path "$(Build.SourcesDirectory)/device_calendar/CHANGELOG.md" -Raw

              Write-Host " (i) Original CHANGELOG.md content: $changelogContent"

              [string] $newChangelogContent = $changelogContent -replace $version, "$version-dev.$(Build.BuildID)"

              Write-Host " (i) Updated CHANGELOG.md content: $newChangelogContent"

              $newChangelogContent| Set-Content -Path "$(Build.SourcesDirectory)/device_calendar/CHANGELOG.md"

        # - task: CmdLine@2
        #   displayName: 'Dry run publish'
        #   inputs:
        #     workingDirectory: '$(Build.SourcesDirectory)/device_calendar'
        #     script: '$(flutterExecPath) pub publish --dry-run'

        # - task: CmdLine@2
        #   displayName: 'Publish'
        #   inputs:
        #     workingDirectory: '$(Build.SourcesDirectory)/device_calendar'
        #     script: '$(flutterExecPath) pub publish --force'
            
  # ----------- CD Production -----------
  - stage: ReleaseProd
    condition: eq(1,2)
    # dependsOn: Build
    # condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/master'))
    jobs: 
     - job: Release
       pool:
        vmImage: 'windows-latest'
       steps:
        - task: FlutterInstall@0
          displayName: 'Flutter install'
          inputs:
            channel: 'stable'
            version: 'latest'

        - task: CmdLine@2
          displayName: 'Dry run publish'
          inputs:
            workingDirectory: '$(Build.SourcesDirectory)/device_calendar'
            script: '$(flutterExecPath) pub publish --dry-run'

        - task: CmdLine@2
          displayName: 'Publish'
          inputs:
            workingDirectory: '$(Build.SourcesDirectory)/device_calendar'
            script: '$(flutterExecPath) pub publish --force'

        - task: PowerShell@2
          displayName: 'Get version from pubspec.yaml'
          inputs:
            targetType: 'inline'
            script: |
              [string] $version = select-string -path "$(Build.SourcesDirectory)/device_calendar/pubspec.yaml" -pattern "(?<=version: ).*" | %{ $_.Matches[0].Value }
              
              Write-Host "##vso[task.setvariable variable=currentVersion]$version"

        - task: GitHubRelease@1
          displayName: 'Tag a release to GitHub'
          inputs:
            gitHubConnection: 'github.com_Brett09'
            repositoryName: 'builttoroam/flutter_plugins'
            action: 'create'
            target: 'master'
            tagSource: 'userSpecifiedTag'
            tag: v$(currentVersion)
            title: v$(currentVersion)
            assets: $(Build.ArtifactStagingDirectory)/*
            changeLogCompareToRelease: 'lastFullRelease'
            changeLogType: 'commitBased'