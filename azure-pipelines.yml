# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

variables:
  # The $(FlutterToolPath) variable is generated by the FlutterInstall task 
  # See code in the Flutter Build task https://github.com/aloisdeniel/vsts-flutter-tasks/blob/master/tasks/build/index.ts
  flutterExecPath: $(FlutterToolPath)/flutter.bat

trigger:
  batch: 'true'
  branches:
    include:
      - develop
     # - release

stages:
  # CI
  - stage: Build
    # TODO:Remove after testing
    condition: eq(1,2)
    jobs: 
     - job: BuildAndroid
       pool:
        vmImage: 'windows-latest'
       steps:
        - task: FlutterInstall@0
          inputs:
            channel: 'stable'
            version: 'latest'
        - task: FlutterBuild@0
          inputs:
            target: 'apk'
            projectDirectory: 'device_calendar/example'
     - job: BuildIos
       pool:
        vmImage: 'macOS-latest'
        steps:
        - task: FlutterInstall@0
          inputs:
            channel: 'stable'
            version: 'latest'
        - task: FlutterBuild@0
          inputs:
            target: 'ios'
            projectDirectory: 'device_calendar/example'
  # CD Beta
  - stage: ReleaseBeta
    # TODO:Remove/uncomment after testing
    condition: eq(1,1)
    #dependsOn: Build
    #condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/develop'))
    jobs:
     - job: Release
       pool:
        vmImage: 'windows-latest'
       steps:
        - task: PowerShell@2
          displayName: 'Update pubspec version'
          inputs:
            targetType: 'inline'
            script: |
              
              [string] $versionRegex = 'version:\s+\K\S+'
              [string] $pubspecContent = Get-Content -Path "$(Build.SourcesDirectory)/device_calendar/pubspec.yaml" -Raw

              Write-Host " (i) Original pubspec.yaml content: $pubspecContent"

              [bool] $hasMatches = $pubspecContent -match $versionRegex

              Write-Host " (i) Found matches to replace version? $hasMatches"

              [string] $newPubspecContent = $pubspecContent -replace $versionRegex, "$env:VERSION-dev.$(Build.BuildID)"
              
              Write-Host " (i) Updated build.gradle content: $newPubspecContent"
              
              $newPubspecContent | Set-Content -Path "$(Build.SourcesDirectory)/device_calender/pubspec.yaml"
              
          # - task: CmdLine@2
          #   inputs:
          #     workingDirectory: '$(Build.SourcesDirectory)/device_calendar'
          #     script: '$(flutterExecPath) pub publish --dry-run'
          # TODO: GitHub Tagging
  # CD Prod
  - stage: ReleaseProd
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/release'))
    jobs: 
     - job: Release
       pool:
        vmImage: 'windows-latest'
          # TODO: Add tasks